apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: {{ .Values.containerPort }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 60
            periodSeconds: 10
          resources:
            requests:
              cpu: "500m"
              memory: "128Mi"
            limits:
              cpu: "1000m"
              memory: "500Mi"

          volumeMounts:
            - name: config #3
              mountPath: "/application.properties"
              subPath: "application.properties"
              readOnly: true # true/false
      volumes:
        # You set volumes at the Pod level,
        # then mount them into containers inside that Pod
        - name: config  #3
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ .Chart.Name }}-config #1
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "application.properties"
                path: "application.properties"